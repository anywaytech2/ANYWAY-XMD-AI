import{default as makeWASocket,DisconnectReason,useSingleFileAuthState,fetchLatestBaileysVersion}from"@whiskeysockets/baileys";import pino from"pino";import*as fs from"fs";import path from"path";import dotenv from"dotenv";dotenv.config();const{PREFIX,AUTO_READ,AUTO_REACT_STATUS,STATUS_LIKE_EMOJI,ANTI_DELETE_MESSAGE,PUBLIC_MODE,PM_PERMIT,CHAT_BOT,AUDIO_CHAT_BOT,SESSION_ID,OWNER_NAME,NUMERO_OWNER,BOT_NAME}=process.env;const sessionFile=path.join("./session",SESSION_ID||"session");const{state,saveState}=useSingleFileAuthState(sessionFile);const logger=pino({level:"silent"});async function startBot(){const{version,isLatest}=await fetchLatestBaileysVersion();console.log(`${BOT_NAME} - Connecting with Baileys version: ${version.join(".")} (Latest? ${isLatest})`);const sock=makeWASocket({logger,printQRInTerminal:true,auth:state,version});sock.ev.on("connection.update",update=>{const{connection,lastDisconnect,qr}=update;if(qr){console.log("Scan QR Code to login:")}if(connection==="close"){const reason=lastDisconnect?.error?.output?.statusCode||lastDisconnect?.error?.statusCode;if(reason===DisconnectReason.loggedOut){console.log("Logged out, please delete session and scan QR again.");process.exit(0)}else{console.log(`Connection closed, reconnecting...`);startBot()}}if(connection==="open"){console.log(`${BOT_NAME} connected successfully!`)}});sock.ev.on("creds.update",saveState);sock.ev.on("messages.upsert",async msgData=>{try{const messages=msgData.messages;if(!messages||messages.length===0)return;const msg=messages[0];if(!msg.message)return;const from=msg.key.remoteJid;const isGroup=from.endsWith("@g.us");const sender=msg.key.participant||msg.key.remoteJid;if(AUTO_READ==="yes"){await sock.readMessages([msg.key])}if(ANTI_DELETE_MESSAGE==="yes"){sock.ev.on("messages.delete",async del=>{for(const dmsg of del){if(!dmsg.key.fromMe){const jid=dmsg.key.remoteJid;await sock.sendMessage(jid,{text:`Message deleted by @${dmsg.key.participant?.split("@")[0]||"user"}`},{mentions:[dmsg.key.participant]})}}})}const text=msg.message.conversation||msg.message.extendedTextMessage?.text||"";if(!text.startsWith(PREFIX))return;const commandBody=text.slice(PREFIX.length).trim().split(/ +/);const command=commandBody[0].toLowerCase();const args=commandBody.slice(1);if(command==="ping"){await sock.sendMessage(from,{text:"Pong! 🏓"},{quoted:msg})}if(command==="owner"){await sock.sendMessage(from,{text:`Bot Owner: ${OWNER_NAME}\nNumber: +${NUMERO_OWNER}`},{quoted:msg})}}catch(err){console.error("Message handler error:",err)}});if(AUTO_REACT_STATUS==="yes"){sock.ev.on("presence.update",async update=>{console.log("Presence update:",update)})}}startBot();
